{"version":3,"sources":["BaseComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/Script/Component/Base","sourcesContent":["/**\n * 该脚本为逻辑组件脚本基类，所有逻辑节点都继承该类\n * 创建于 2017/12/24\n */\nconst {ccclass, property, executionOrder} = cc._decorator;\nimport { Emitter } from \"../../Module/Emitter\";\nimport ButtonClick from \"../ButtonClick\";\nimport { ClientData } from \"../../Module/ClientData\";\nimport { RES, RES_TYPE } from \"../../resource\";\n@ccclass\n@executionOrder(0)\nexport default class BaseComponent extends cc.Component {\n    @property(cc.Node)\n    ArrButton : cc.Node[] = [];\n    @property(cc.Node)\n    Canvas : cc.Node = null;\n\n    _emitter : Emitter;\n    _client : ClientData;\n    _logicComponentName : string;\n    _spriteFrame : {};\n    _fExitFunc : Function;\n    onLoad () : void {\n        let self = this; \n        self._emitter = Emitter.getInstance();\n        self._client = ClientData.getInstance();\n        if (self._isLogicNode()) {\n            self._logicNode();\n        }\n        self._initData();\n        self._initUI();\n    }\n\n    _initUI () : void {\n\n    }\n\n    _initData () : void {\n        let self = this;\n        self._fExitFunc = null;\n    }\n\n    /**\n     * 逻辑节点做得一些另外的操作\n     */\n    _logicNode () : void {\n        let self = this;\n        //当前如果是逻辑节点才去注册这个事件，避免重复注册\n        self._emitter.on(\"runScene\", self._runScene, self);\n        for (let i in self.ArrButton) {\n            let _node = self.ArrButton[i];\n            let _btn = _node.getComponent(\"cc.Button\");\n            self._bindClick(_btn, _node.name);\n            // new ButtonClick().setButtonData({\n            //     name : _node.name,\n            //     btn : _btn,\n            //     comp : self._logicComponentName\n            // });\n        }\n    }\n\n    /**\n     * 绑定按钮事件\n     * @param btn 按钮组件对象\n     * @param name 要绑定的函数名称\n     */\n    _bindClick (btn : cc.Button, name : string) : void {\n        let self = this;\n        //获取逻辑节点脚本组件对象\n        let oCompObject = cc.director.getScene().getChildByName(\"LogicNode\").getComponent(self._logicComponentName);\n        let sName = \"_tap_\" + name + \"\";\n        if (oCompObject[sName]) {\n            //添加按钮普通的点击事件\n            self.addBtnEvent(sName, btn);\n        } else {\n            cc.warn(\"该节点组件\", self._logicComponentName, \"未注册[\", sName, \"]函数\");\n        }\n    }\n\n    /**\n     * 运行指定的场景\n     * @param name 场景名称 \n     * @param cb 加载成功的回调函数 选填\n     */\n    _runScene (name : string, cb ?: Function) : void {\n        let self = this;\n        cc.director.preloadScene(name, (err) => {\n            if (err) {\n                cc.warn(\"场景预加载失败->[\", name, \"]\");\n            } else {\n                self.onExit();\n                cc.director.loadScene(name, cb);\n            }\n        });\n    }\n\n    /**\n     * 判断当前节点是否是逻辑节点\n     * @return 是否是逻辑节点\n     */\n    _isLogicNode () : boolean {\n        let self = this;\n        return self.node.name == \"LogicNode\" ? true : false; \n    }\n\n    /**\n     * 获取当前场景大小\n     * @return 场景大小尺寸\n     */\n    getWinSize () : cc.Size {\n        return cc.director.getWinSize();\n    }\n\n    /**\n     * 获取当前脚本对象名称\n     * @return 脚本对象名称\n     */\n    getObjectName () : string {\n        let self = this;\n        let name : string = self.name;\n        let index : number = name.indexOf(\"<\");\n        name = name.slice(index + 1, name.length - 1);\n        return name;\n    }\n\n    /**\n     * 添加按钮点击事件\n     * @param name 点击事件的名称\n     * @param btn 点击事件绑定的按钮\n     * @param data 自定义数据 选填\n     */\n    addBtnEvent (name : string, btn : cc.Button, data ?: any) : void {\n        let self = this;        \n        if (! self._isLogicNode()) return;\n        var clickEventHandler = new cc.Component.EventHandler();\n        clickEventHandler.target = self.node; //这个 node 节点是你的事件处理代码组件所属的节点\n        clickEventHandler.component = self._logicComponentName;//这个是代码文件名\n        clickEventHandler.handler = name;\n        clickEventHandler.customEventData = data;\n        btn.clickEvents.push(clickEventHandler);\n    }\n\n    /**\n     * 当前组件被销毁时调用\n     */\n    onDestroy () : void {\n       \n    }\n\n    /**\n     * 场景跳转之前做的一些业务\n     */\n    onExit () : void {\n        //当前场景资源的释放\n        RES.fReleaseRes(RES_TYPE.MODULE);\n    }\n\n}"]}