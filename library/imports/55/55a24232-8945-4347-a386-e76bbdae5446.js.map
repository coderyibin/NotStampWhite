{"version":3,"sources":["../../../../../assets/Script/Module/assets/Script/Module/Emitter.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Script/Module","sourcesContent":["/**  \n * 事件  \n */  \nexport class Emitter {  \n    /** 监听数组 */  \n    private listeners = {};  \n  \n    /**   \n     * 注册事件  \n     * @param name 事件名称  \n     * @param callback 回调函数  \n     * @param context 上下文  \n     */  \n    public on(name: string, callback: Function, context: any) {  \n        let self : Emitter = this;\n        let observers: Observer[] = this.listeners[name];  \n        if (observers && name == \"runScene\") {\n            return;\n        }\n        if (!observers) {\n            self.listeners[name] = [];  \n        }  \n        self.listeners[name].push(new Observer(callback, context));  \n    }  \n  \n    /**  \n     * 移除事件  \n     * @param name 事件名称  \n     * @param callback 回调函数  \n     * @param context 上下文  \n     */  \n    public remove(name: string, callback: Function, context: any) { \n        let self : Emitter = this; \n        let observers: Observer[] = self.listeners[name];  \n        if (!observers) return;  \n        let length = observers.length;  \n        for (let i = 0; i < length; i++) {  \n            let observer = observers[i];  \n            if (observer.compar(context)) {  \n                observers.splice(i, 1);  \n                break;  \n            }  \n        }  \n        if (observers.length == 0) {  \n            delete self.listeners[name];  \n        }  \n    }  \n  \n    /**  \n     * 发送事件  \n     * @param name 事件名称  \n     */  \n    public emit(name: string, ...args: any[]) {  \n        let self : Emitter = this;\n        let observers: Observer[] = self.listeners[name];  \n        if (!observers) return;  \n        let length = observers.length;  \n        for (let i = 0; i < length; i++) {  \n            let observer = observers[i];  \n            observer.notify(name, ...args);  \n        }  \n    }  \n\n    private static _emitter : Emitter;\n    public static getInstance () : Emitter {\n        if (! this._emitter) {\n            this._emitter = new Emitter();\n            return this._emitter;\n        }\n        return this._emitter;\n    }\n}  \n\n/**  \n * 观察者  \n */  \nclass Observer {  \n    /** 回调函数 */  \n    private callback: Function = null;  \n    /** 上下文 */  \n    private context: any = null;  \n  \n    constructor(callback: Function, context: any) {  \n        let self = this;  \n        self.callback = callback;  \n        self.context = context;  \n    }  \n  \n    /**  \n     * 发送通知  \n     * @param args 不定参数  \n     */  \n    notify(...args: any[]): void {  \n        let self = this;  \n        self.callback.call(self.context, ...args);  \n    }  \n  \n    /**  \n     * 上下文比较  \n     * @param context 上下文  \n     */  \n    compar(context: any): boolean {  \n        return context == this.context;  \n    }  \n}  "]}