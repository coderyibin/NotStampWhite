{"version":3,"sources":["../../../../../../assets/Script/Component/Base/assets/Script/Component/Base/BaseButton.ts"],"names":[],"mappings":";;;;;AAAM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AAG1C;IAAgC,8BAAS;IADzC;QAAA,qEA0DC;QAxDG,UAAU;QACV,kBAAY,GAAa,KAAK,CAAC;;IAuDnC,CAAC;IAnDG,kCAAa,GAAb,UAAe,IAAU;QACrB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACnB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC;QACrC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACH,+BAAU,GAAV,UAAY,GAAe,EAAE,IAAa;QACtC,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,cAAc;QACd,IAAI,WAAW,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC5G,IAAI,KAAK,GAAG,KAAK,GAAG,IAAI,GAAG,OAAO,CAAC;QACnC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,aAAa;YACb,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACrE,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,gCAAW,GAAX,UAAa,IAAa,EAAE,GAAe,EAAE,IAAW;QACpD,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,qCAAqC;QACrC,IAAI,iBAAiB,GAAG,IAAI,EAAE,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;QACxD,iBAAiB,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,4BAA4B;QAClE,iBAAiB,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAA,UAAU;QACjE,iBAAiB,CAAC,OAAO,GAAG,IAAI,CAAC;QACjC,iBAAiB,CAAC,eAAe,GAAG,IAAI,CAAC;QACzC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC5C,CAAC;IAED,UAAU;IACV,+BAAU,GAAV,UAAY,IAAc;QACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED,YAAY;IACZ,mCAAc,GAAd,UAAgB,IAAc;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC7B,CAAC;IAxDQ,UAAU;QADtB,OAAO;OACK,UAAU,CAyDtB;IAAD,iBAAC;CAzDD,AAyDC,CAzD+B,EAAE,CAAC,MAAM,GAyDxC;AAzDY,gCAAU","file":"","sourceRoot":"../../../../../../assets/Script/Component/Base","sourcesContent":["const {ccclass, property} = cc._decorator;\n\n@ccclass\nexport class BaseButton extends cc.Button {\n    //限制按钮触发时间\n    _timeEmitter : boolean = false;\n    //逻辑节点脚本组件名称\n    _logicComponentName : string;\n\n    setButtonData (data : any) : void {\n        let btn = data.btn;\n        let name = data.name;\n        this._logicComponentName = data.comp;\n        this._bindClick(btn, name);\n    }\n\n    /**\n     * 绑定按钮事件\n     * @param btn 按钮组件对象\n     * @param name 要绑定的函数名称\n     */\n    _bindClick (btn : cc.Button, name : string) : void {\n        let self = this;\n        //获取逻辑节点脚本组件对象\n        let oCompObject = cc.director.getScene().getChildByName(\"LogicNode\").getComponent(self._logicComponentName);\n        let sName = \"On_\" + name + \"Click\";\n        if (oCompObject[sName]) {\n            //添加按钮普通的点击事件\n            self.addBtnEvent(sName, btn);\n        } else {\n            cc.warn(\"该节点组件\", self._logicComponentName, \"未注册[\", sName, \"]函数\");\n        }\n    }\n\n    /**\n     * 添加按钮点击事件\n     * @param name 点击事件的名称\n     * @param btn 点击事件绑定的按钮\n     * @param data 自定义数据 选填\n     */\n    addBtnEvent (name : string, btn : cc.Button, data ?: any) : void {\n        let self = this;        \n        // if (! self._isLogicNode()) return;\n        var clickEventHandler = new cc.Component.EventHandler();\n        clickEventHandler.target = self.node; //这个 node 节点是你的事件处理代码组件所属的节点\n        clickEventHandler.component = self._logicComponentName;//这个是代码文件名\n        clickEventHandler.handler = name;\n        clickEventHandler.customEventData = data;\n        btn.clickEvents.push(clickEventHandler);\n    }\n\n    //设置是否启动按钮\n    setEnabled (bool : boolean) : void {\n        this.interactable = bool;\n    }\n\n    //设置按钮是否时间限制\n    setTimeEmitter (bool : boolean) : void {\n        this._timeEmitter = bool;\n    }\n}"]}